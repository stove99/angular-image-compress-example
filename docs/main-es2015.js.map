{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,wE;;;;;;;;;;;;;;;;;;;;;ACZkD;AAIJ;;;;;;ICwC5C,0EACE;IAAA,qEACA;IAAA,0EACE;IAAA,yEAAuB;IAAA,0FAAM;IAAA,4DAAK;IAClC,wEAAqB;IAAA,uDAA6C;;IAAA,4DAAI;IACxE,4DAAM;IACR,4DAAM;;;IALC,0DAAW;IAAX,wIAAW;IAGO,0DAA6C;IAA7C,gLAA6C;;;IAItE,0EACE;IAAA,oEAAG;IAAA,uDAAoD;;IAAA,4DAAI;IAC3D,qEACF;IAAA,4DAAM;;;IAFD,0DAAoD;IAApD,uLAAoD;IAClD,0DAAkB;IAAlB,+IAAkB;;AD3CpB,MAAM,YAAY;IACrB,YACY,UAAmC,EACnC,EAAe;QADf,eAAU,GAAV,UAAU,CAAyB;QACnC,OAAE,GAAF,EAAE,CAAa;QAc3B,SAAI,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YACjB,KAAK,EAAE,CAAC,GAAG,CAAC;YACZ,OAAO,EAAE,CAAC,EAAE,CAAC;SAChB,CAAC,CAAC;QAfC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CACvB,mEAAY,CAAC,GAAG,CAAC,CACpB,CAAC,SAAS,CAAC,CAAO,KAAK,EAAE,EAAE,CAAC;YACzB,IAAI,IAAI,CAAC,GAAG,EAAE;gBACV,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,QAAQ,iBAAG,IAAI,EAAE,IAAI,CAAC,GAAG,IAAK,KAAK,EAAG,CAAC;gBAErE,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC,GAAG,CAAC;gBACjC,IAAI,CAAC,cAAc,GAAG,UAAU,CAAC,IAAI,CAAC;aACzC;QACL,CAAC,EAAC,CAAC;IACP,CAAC;IAeD,UAAU,CAAC,CAAM;QACb,IAAI,CAAC,CAAC,MAAM,CAAC,KAAK,EAAE;YAChB,MAAM,IAAI,GAAG,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAC/B,MAAM,MAAM,GAAG,IAAI,UAAU,EAAE,CAAC;YAEhC,MAAM,CAAC,MAAM,GAAG,CAAO,KAAU,EAAE,EAAE,CAAC;gBAClC,eAAe;gBACf,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC;gBAC/B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC;gBAEnE,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,QAAQ,iBAAG,IAAI,EAAE,IAAI,CAAC,GAAG,IAAK,IAAI,CAAC,IAAI,CAAC,KAAK,EAAG,CAAC;gBAC/E,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC,GAAG,CAAC;gBACjC,IAAI,CAAC,cAAc,GAAG,UAAU,CAAC,IAAI,CAAC;gBAEtC,iCAAiC;gBACjC,iBAAiB;gBACjB,4CAA4C;gBAC5C,6BAA6B;gBAE7B,iBAAiB;gBACjB,2EAA2E;gBAC3E,0BAA0B;YAC9B,CAAC,EAAC;YAEF,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;SAC9B;IACL,CAAC;IAEK,QAAQ,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAsD;;YACvF,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,KAAK,EAAE,aAAa,EAAE,OAAO,CAAC,CAAC;YACvD,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;YAE5E,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC;QACpF,CAAC;KAAA;IAED,MAAM,CAAC,IAAI;QACP,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9C,MAAM,MAAM,GAAG,IAAI,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAC7C,MAAM,IAAI,GAAG,IAAI,UAAU,CAAC,MAAM,CAAC,CAAC;QAEpC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACnC,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;SACjC;QAED,OAAO,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC,CAAC;IACpD,CAAC;;wEA3EQ,YAAY;4FAAZ,YAAY;QCXzB,yEACE;QAAA,0EACE;QAAA,yEACE;QAAA,yEACE;QAAA,wEAAO;QAAA,uDAA0B;QAAA,4DAAQ;QACzC,sEAQF;QAAA,4DAAM;QACN,yEACE;QAAA,wEAAO;QAAA,uDAA6B;QAAA,4DAAQ;QAC5C,uEAQF;QAAA,4DAAM;QACR,4DAAM;QAEN,0EACE;QAAA,0EACE;QAAA,yEAAO;QAAA,2FAAM;QAAA,4DAAQ;QACrB,0EACE;QAAA,4EAKA;QAFE,4IAAU,sBAAkB,IAAC;QAH/B,4DAKA;QAAA,4EACG;QAAA,uEAAW;QAAA,4DACb;QACH,4DAAM;QACR,4DAAM;QACR,4DAAM;QACR,4DAAO;QAEP,0GACE;QAOF,2GACE;QAGJ,4DAAM;;QAvDe,0DAAkB;QAAlB,+EAAkB;QAGxB,0DAA0B;QAA1B,4GAA0B;QAW1B,0DAA6B;QAA7B,oHAA6B;QA6BrC,2DAAW;QAAX,yEAAW;QAQX,0DAAkB;QAAlB,gFAAkB;;6FDzCZ,YAAY;cALxB,uDAAS;eAAC;gBACP,QAAQ,EAAE,UAAU;gBACpB,WAAW,EAAE,sBAAsB;gBACnC,SAAS,EAAE,CAAC,sBAAsB,CAAC;aACtC;;;;;;;;;;;;;;AEVD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0D;AACjB;AACyB;AAEnB;AAEc;;AAgBtD,MAAM,SAAS;;wFAAT,SAAS,cAFN,2DAAY;4IAEf,SAAS,mBALP;QACP,0EAAuB;KAC1B,YAPQ;YACL,uEAAa;YACb,0DAAW;YACX,kEAAmB;SACtB;mIAMQ,SAAS,mBAZd,2DAAY,aAGZ,uEAAa;QACb,0DAAW;QACX,kEAAmB;6FAOd,SAAS;cAdrB,sDAAQ;eAAC;gBACN,YAAY,EAAE;oBACV,2DAAY;iBACf;gBACD,OAAO,EAAE;oBACL,uEAAa;oBACb,0DAAW;oBACX,kEAAmB;iBACtB;gBACD,SAAS,EAAE;oBACP,0EAAuB;iBAC1B;gBACD,SAAS,EAAE,CAAC,2DAAY,CAAC;aAC5B;;;;;;;;;;;;;;ACrBD;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACfnE;AAAA;AAAA;AAAA;AAAA;AAA+C;AAIU;;;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,2EAAwB,gBAAgB,CAAC,0DAAU;KAChD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component, OnInit } from '@angular/core';\nimport { NgxImageCompressService } from 'ngx-image-compress';\nimport { FormBuilder } from '@angular/forms';\n\nimport { debounceTime } from 'rxjs/operators';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.sass']\n})\nexport class AppComponent {\n    constructor(\n        private compressor: NgxImageCompressService,\n        private fb: FormBuilder\n    ) {\n        this.form.valueChanges.pipe(\n            debounceTime(500)\n        ).subscribe(async (value) => {\n            if (this.img) {\n                const compressed = await this.compress({ data: this.img, ...value });\n\n                this.convertImg = compressed.img;\n                this.convertImgSize = compressed.size;\n            }\n        });\n    }\n\n    form = this.fb.group({\n        ratio: [100],\n        quality: [50]\n    });\n\n    img: string;\n\n    imgSize: number;\n\n    convertImg: string;\n\n    convertImgSize: number;\n\n    selectFile(e: any) {\n        if (e.target.files) {\n            const file = e.target.files[0];\n            const reader = new FileReader();\n\n            reader.onload = async (event: any) => {\n                // base64 image\n                this.img = event.target.result;\n                this.imgSize = this.compressor.byteCount(this.img) / (1024 * 1024);\n\n                const compressed = await this.compress({ data: this.img, ...this.form.value });\n                this.convertImg = compressed.img;\n                this.convertImgSize = compressed.size;\n\n                // blob 또는 File 로 변환해서 업로드 처리하면 됨\n                // base64 => blob\n                // const blob = this.toBlob(compressed.img);\n                // console.log('blob', blob);\n\n                // base64 => File\n                // const f = new File([compressed.img], file.name, { type: 'image/jpeg' });\n                // console.log('file', f);\n            };\n\n            reader.readAsDataURL(file);\n        }\n    }\n\n    async compress({ data, ratio, quality }: { data: string, ratio?: number, quality?: number }) {\n        console.log('ratio : ', ratio, ' quality : ', quality);\n        const result = await this.compressor.compressFile(data, -1, ratio, quality);\n\n        return { img: result, size: this.compressor.byteCount(result) / (1024 * 1024) };\n    }\n\n    toBlob(data) {\n        const bytes = window.atob(data.split(',')[1]);\n        const buffer = new ArrayBuffer(bytes.length);\n        const blob = new Uint8Array(buffer);\n\n        for (let i = 0; i < bytes.length; i++) {\n            blob[i] = bytes.charCodeAt(i);\n        }\n\n        return new Blob([blob], { type: 'image/jpeg' });\n    }\n}\n","<div class=\"container\">\n  <form class=\"my-3\" [formGroup]=\"form\">\n    <div class=\"form-row\">\n      <div class=\"col\">\n        <label>비율 {{ form.value.ratio }}%</label>\n        <input\n          type=\"range\"\n          class=\"custom-range\"\n          min=\"0\"\n          max=\"200\"\n          step=\"1\"\n          formControlName=\"ratio\"\n        />\n      </div>\n      <div class=\"col\">\n        <label>퀄리티 {{ form.value.quality }}%</label>\n        <input\n          type=\"range\"\n          class=\"custom-range\"\n          min=\"0\"\n          max=\"200\"\n          step=\"1\"\n          formControlName=\"quality\"\n        />\n      </div>\n    </div>\n\n    <div class=\"form-row\">\n      <div class=\"col\">\n        <label>이미지 파일</label>\n        <div class=\"custom-file\">\n          <input\n            type=\"file\"\n            class=\"custom-file-input\"\n            (change)=\"selectFile($event)\"\n          />\n          <label class=\"custom-file-label\" accept=\".jpg,.png,.jpeg\"\n            >Choose file</label\n          >\n        </div>\n      </div>\n    </div>\n  </form>\n\n  <div *ngIf=\"img\" class=\"card\" style=\"width: 18rem;\">\n    <img [src]=\"img\" class=\"card-img-top\" alt=\"원본\" />\n    <div class=\"card-body\">\n      <h5 class=\"card-title\">원본 이미지</h5>\n      <p class=\"card-text\">File Size : {{ imgSize | number: \"1.2-2\" }}MB</p>\n    </div>\n  </div>\n\n  <div *ngIf=\"convertImg\" class=\"my-3 p-3 border shadow\">\n    <p>File Size : {{ convertImgSize | number: \"1.2-2\" }}MB</p>\n    <img [src]=\"convertImg\" alt=\"압축\" />\n  </div>\n</div>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\n\nimport { NgxImageCompressService } from 'ngx-image-compress';\n\n@NgModule({\n    declarations: [\n        AppComponent\n    ],\n    imports: [\n        BrowserModule,\n        FormsModule,\n        ReactiveFormsModule\n    ],\n    providers: [\n        NgxImageCompressService\n    ],\n    bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}